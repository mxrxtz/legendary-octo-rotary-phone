name: Publish
on:
  push:
    branches: [main]

jobs:
  build:
    strategy:
      max-parallel: 1
      matrix:
        channel:
          - latest
          - dev

    runs-on: ubuntu-latest
    env:
      TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
      TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
    steps:
      - name: Generate a token
        uses: actions/create-github-app-token@v1
        if: matrix.channel == 'latest'
        id: generate-token
        with:
          # uses https://github.com/organizations/tinacms/settings/apps/release-bot-allow-prs-and-push
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_APP_SECRET }}

      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - uses: pnpm/action-setup@v4
        name: Install pnpm
        id: pnpm-install
        with:
          package_json_file: package.json
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v4
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Build
        run: pnpm build

      - name: Build Types
        run: pnpm types

      - name: Set NPMRC
        run: echo "//registry.npmjs.org/:_authToken=${NPM_AUTH_TOKEN}" > .npmrc
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Release to @dev channel
        if: matrix.channel == 'dev'
        run: |
          pnpm version:snapshot
          pnpm run publish:beta

      - name: Publish
        if: matrix.channel == 'latest'
        run: |
          pnpm run publish

      - name: Push tags
        if: matrix.channel == 'latest'
        run: |
          pnpm push-tags
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Create release pull request
        uses: changesets/action@v1
        if: matrix.channel == 'latest'
        with:
          version: pnpm run version
        env:
          GITHUB_TOKEN: ${{ steps.generate-token.outputs.token || secrets.GITHUB_TOKEN  }}
